{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Goliva/Desktop/CandiGo/fronted/src/lib/supabaseServerClient.ts"],"sourcesContent":["// src/lib/supabaseServerClient.ts\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('supabaseUrl and supabaseKey are required.');\r\n}\r\n\r\nexport const supabaseServer = createClient(supabaseUrl, supabaseKey);\r\n\r\n"],"names":[],"mappings":"AAAA,kCAAkC;;;;AAClC;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,iBAAiB,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Goliva/Desktop/CandiGo/fronted/src/app/api/votos/analizar/route.ts"],"sourcesContent":["import { supabaseServer } from '@/lib/supabaseServerClient';\r\nconst { MultinomialNB } = require('ml-classify-text');\r\n\r\nexport async function GET() {\r\n  try {\r\n    // Traer votos\r\n    const { data: votos, error } = await supabaseServer\r\n      .from('votos')\r\n      .select('candidato');\r\n\r\n    console.log('Votos obtenidos desde Supabase:', votos, 'Error:', error);\r\n\r\n    if (error) throw new Error(error.message);\r\n\r\n    if (!votos || votos.length === 0) {\r\n      return new Response(JSON.stringify({ totalVotos: 0, probabilidades: [] }), {\r\n        status: 200,\r\n        headers: { 'Content-Type': 'application/json' },\r\n      });\r\n    }\r\n\r\n    // Preparar datos para Naive Bayes\r\n    const X = votos.map((v: any) => v.candidato);\r\n    const y = votos.map((v: any) => v.candidato);\r\n\r\n    const nb = new MultinomialNB();\r\n    nb.train(X, y);\r\n\r\n    // Calcular probabilidades\r\n    const candidatosUnicos = Array.from(new Set(y));\r\n    const probabilidades = candidatosUnicos.map((c) => {\r\n      const probs = nb.predictProb(c);\r\n      return { candidato: c, probabilidad: probs[0] };\r\n    });\r\n\r\n    console.log('Probabilidades calculadas:', probabilidades);\r\n\r\n    return new Response(JSON.stringify({ totalVotos: y.length, probabilidades }), {\r\n      status: 200,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  } catch (err: any) {\r\n    console.error('Error analizar votos:', err);\r\n    return new Response(JSON.stringify({ error: err.message || 'Error desconocido' }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' },\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,EAAE,aAAa,EAAE;AAEhB,eAAe;IACpB,IAAI;QACF,cAAc;QACd,MAAM,EAAE,MAAM,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,oIAAA,CAAA,iBAAc,CAChD,IAAI,CAAC,SACL,MAAM,CAAC;QAEV,QAAQ,GAAG,CAAC,mCAAmC,OAAO,UAAU;QAEhE,IAAI,OAAO,MAAM,IAAI,MAAM,MAAM,OAAO;QAExC,IAAI,CAAC,SAAS,MAAM,MAAM,KAAK,GAAG;YAChC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,YAAY;gBAAG,gBAAgB,EAAE;YAAC,IAAI;gBACzE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAChD;QACF;QAEA,kCAAkC;QAClC,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,IAAW,EAAE,SAAS;QAC3C,MAAM,IAAI,MAAM,GAAG,CAAC,CAAC,IAAW,EAAE,SAAS;QAE3C,MAAM,KAAK,IAAI;QACf,GAAG,KAAK,CAAC,GAAG;QAEZ,0BAA0B;QAC1B,MAAM,mBAAmB,MAAM,IAAI,CAAC,IAAI,IAAI;QAC5C,MAAM,iBAAiB,iBAAiB,GAAG,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,WAAW,CAAC;YAC7B,OAAO;gBAAE,WAAW;gBAAG,cAAc,KAAK,CAAC,EAAE;YAAC;QAChD;QAEA,QAAQ,GAAG,CAAC,8BAA8B;QAE1C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,YAAY,EAAE,MAAM;YAAE;QAAe,IAAI;YAC5E,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO,IAAI,OAAO,IAAI;QAAoB,IAAI;YACjF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAChD;IACF;AACF","debugId":null}}]
}