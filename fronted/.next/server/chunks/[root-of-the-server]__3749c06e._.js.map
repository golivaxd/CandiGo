{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 146, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Goliva/Desktop/CandiGo/fronted/src/lib/supabaseClient.ts"],"sourcesContent":["// src/lib/supabaseClient.ts\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { useEffect } from 'react';\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\r\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\r\n\r\nif (!supabaseUrl || !supabaseKey) {\r\n  throw new Error('supabaseUrl and supabaseKey are required.');\r\n}\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseKey, {\r\n  auth: {\r\n    persistSession: true,\r\n    autoRefreshToken: true,\r\n    detectSessionInUrl: true, // ðŸ‘ˆ sÃºper importante para reset password / magic links\r\n  },\r\n});\r\n\r\n// Hook para escuchar cambios de sesiÃ³n\r\nexport function useAuth(onAuth: (session: any) => void) {\r\n  useEffect(() => {\r\n    const { data: subscription } = supabase.auth.onAuthStateChange(\r\n      async (event, session) => {\r\n        if (event === 'SIGNED_IN') {\r\n          onAuth(session);\r\n        } else if (event === 'SIGNED_OUT') {\r\n          onAuth(null);\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      subscription?.subscription?.unsubscribe();\r\n    };\r\n  }, [onAuth]);\r\n}\r\n\r\n// SignUp (ejemplo)\r\nexport const handleSignUp = async (\r\n  e: React.FormEvent,\r\n  email: string,\r\n  password: string\r\n) => {\r\n  e.preventDefault();\r\n  try {\r\n    const { data, error } = await supabase.auth.signUp({\r\n      email,\r\n      password,\r\n    });\r\n    if (error) {\r\n      console.error('Error al registrarse:', error);\r\n    } else {\r\n      console.log('Registro exitoso:', data);\r\n    }\r\n  } catch (err) {\r\n    console.error('Error inesperado:', err);\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA,4BAA4B;;;;;;AAC5B;AACA;;;AAEA,MAAM;AACN,MAAM;AAEN;;AAIO,MAAM,WAAW,CAAA,GAAA,yLAAA,CAAA,eAAY,AAAD,EAAE,aAAa,aAAa;IAC7D,MAAM;QACJ,gBAAgB;QAChB,kBAAkB;QAClB,oBAAoB;IACtB;AACF;AAGO,SAAS,QAAQ,MAA8B;IACpD,CAAA,GAAA,uMAAA,CAAA,YAAS,AAAD,EAAE;QACR,MAAM,EAAE,MAAM,YAAY,EAAE,GAAG,SAAS,IAAI,CAAC,iBAAiB,CAC5D,OAAO,OAAO;YACZ,IAAI,UAAU,aAAa;gBACzB,OAAO;YACT,OAAO,IAAI,UAAU,cAAc;gBACjC,OAAO;YACT;QACF;QAGF,OAAO;YACL,cAAc,cAAc;QAC9B;IACF,GAAG;QAAC;KAAO;AACb;AAGO,MAAM,eAAe,OAC1B,GACA,OACA;IAEA,EAAE,cAAc;IAChB,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,MAAM,CAAC;YACjD;YACA;QACF;QACA,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,yBAAyB;QACzC,OAAO;YACL,QAAQ,GAAG,CAAC,qBAAqB;QACnC;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,qBAAqB;IACrC;AACF","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Goliva/Desktop/CandiGo/fronted/src/app/api/votos/analizar/route.ts"],"sourcesContent":["import { supabase } from '@/lib/supabaseClient';\r\n// Usamos require porque ml-classify-text no soporta import/export\r\nconst { MultinomialNB } = require('ml-classify-text');\r\n\r\nexport async function GET() {\r\n  // 1. Obtener votos de la tabla 'votos'\r\n  const { data: votos, error } = await supabase\r\n    .from('votos')\r\n    .select('candidato');\r\n\r\n  if (error) return new Response(JSON.stringify({ error: error.message }), { status: 500 });\r\n  if (!votos || votos.length === 0) return new Response(JSON.stringify({ mensaje: 'No hay votos' }), { status: 200 });\r\n\r\n  // 2. Preparar datos para Naive Bayes\r\n  const X = votos.map(v => [v.candidato]);\r\n  const y = votos.map(v => v.candidato);\r\n\r\n  // 3. Entrenar Naive Bayes\r\n  const nb = new MultinomialNB();\r\n  nb.train(X, y); // <-- AquÃ­ se usa Naive Bayes\r\n\r\n  // 4. Predecir probabilidades para cada candidato Ãºnico\r\n  const candidatosUnicos = Array.from(new Set(y));\r\n  const probabilidades = candidatosUnicos.map(c => ({\r\n    candidato: c,\r\n    probabilidad: nb.predictProb([c])[0]\r\n  }));\r\n\r\n  // 5. Retornar resultados\r\n  return new Response(JSON.stringify({ totalVotos: y.length, probabilidades }), { status: 200 });\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AACA,kEAAkE;AAClE,MAAM,EAAE,aAAa,EAAE;AAEhB,eAAe;IACpB,uCAAuC;IACvC,MAAM,EAAE,MAAM,KAAK,EAAE,KAAK,EAAE,GAAG,MAAM,8HAAA,CAAA,WAAQ,CAC1C,IAAI,CAAC,SACL,MAAM,CAAC;IAEV,IAAI,OAAO,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QAAE,OAAO,MAAM,OAAO;IAAC,IAAI;QAAE,QAAQ;IAAI;IACvF,IAAI,CAAC,SAAS,MAAM,MAAM,KAAK,GAAG,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QAAE,SAAS;IAAe,IAAI;QAAE,QAAQ;IAAI;IAEjH,qCAAqC;IACrC,MAAM,IAAI,MAAM,GAAG,CAAC,CAAA,IAAK;YAAC,EAAE,SAAS;SAAC;IACtC,MAAM,IAAI,MAAM,GAAG,CAAC,CAAA,IAAK,EAAE,SAAS;IAEpC,0BAA0B;IAC1B,MAAM,KAAK,IAAI;IACf,GAAG,KAAK,CAAC,GAAG,IAAI,8BAA8B;IAE9C,uDAAuD;IACvD,MAAM,mBAAmB,MAAM,IAAI,CAAC,IAAI,IAAI;IAC5C,MAAM,iBAAiB,iBAAiB,GAAG,CAAC,CAAA,IAAK,CAAC;YAChD,WAAW;YACX,cAAc,GAAG,WAAW,CAAC;gBAAC;aAAE,CAAC,CAAC,EAAE;QACtC,CAAC;IAED,yBAAyB;IACzB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;QAAE,YAAY,EAAE,MAAM;QAAE;IAAe,IAAI;QAAE,QAAQ;IAAI;AAC9F","debugId":null}}]
}